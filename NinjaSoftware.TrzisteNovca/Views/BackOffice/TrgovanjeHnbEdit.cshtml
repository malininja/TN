@model NinjaSoftware.TrzisteNovca.Models.BackOffice.TrgovanjeHnbViewModel
@using Newtonsoft.Json

@Scripts.Render("/bundles/knockout")

@{
    string title;
    
    if (Model.TrgovanjeGlavaHnb.IsNew)
    {
        title = "Unos novog trgovanja";
    }
    else
    {
        title = string.Format("Uređivanje trgovanja za datum {0}", Model.TrgovanjeGlavaHnb.Datum.ToShortDateString());
    }
    
    ViewBag.Title = title;
}

<h2>@title</h2>

<form id="FormTrgovanje" action="/someServerSideHandler">
    <input type="submit" value="Pohrani" />

    <div data-bind="template: { name: 'TrgovanjeGlavaHnbTemplate', data: trgovanjeGlavaHnb }"></div>
    
    <script type="text/html" id="TrgovanjeGlavaHnbTemplate">
        <table>
@if (Model.TrgovanjeGlavaHnb.IsNew)
{
            <tr>
                <td>Datum:</td>
                <td>
                    <input id="InputDatum" class="requred date" data-bind="value: Datum" />
                </td>
            </tr>
}
    </script>
    
    <h3>Rokovi</h3>

    <table>
        <tr>
            <td>
                <select id="dropDownTrgovanjeVrsta" data-bind="options: $root.trgovanjeVrstaCollection, value: $root.selectedTrgovanjeVrsta, optionsText: 'Name'"></select>
            </td>
            <td>
                <input type="button" value="Unesi" onclick="viewModel.addTrgovanjeStavkaHnb();" />
            </td>
        </tr>
    </table>

    <table id="tableStavke">
        <thead>
            <tr>
                <th>Naziv</th>
                <th>Iznos</th>
                <th>KamatnaStopa</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: trgovanjeStavkaHnbCollection">
            <tr>
                <td data-bind="text: TrgovanjeVrsta.Name"></td>
                <td>
                    <input class="required number numberCss" data-bind="value: Iznos, uniqueName: true" />
                </td>
                <td>
                    <input class="required number numberCss" data-bind="value: KamatnaStopa, uniqueName: true" />
                </td>
                <td>
                    <a href="#" data-bind="click: function(data) { $root.deleteTrgovanjeStavkaHnb(data); }"><span>Obriši</span></a>
                </td>
            </tr>
        </tbody>
    </table>
</form>

<script type="text/javascript">
    $(document).ready(function () {
        Globalize.culture("hr");

        $("#InputDatum").datepicker();
    });

    var trgovanjeViewModel = function () {
        var self = {};

        // data sources
        self.trgovanjeGlava = ko.observable(@Html.Raw(JsonConvert.SerializeObject(Model.TrgovanjeGlava)));
        self.trgovanjeStavkaCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.TrgovanjeStavkaCollection)));
        self.trgovanjeVrstaCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.TrgovanjeVrstaCollection)));
        self.valutaCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.ValutaCollection)));
        self.selectedTrgovanjeVrsta = ko.observable();
        self.selectedValuta = ko.observable();

        // hr data formating
        var date = new Date(self.trgovanjeGlava().Datum);
        self.trgovanjeGlava().Datum = Globalize.format(date, "d");

        $(self.trgovanjeStavkaCollection()).each(function () {
            var tmp = parseFloat(this.Ponuda.toString());
            this.Ponuda = Globalize.format(tmp, "n2");

            tmp = parseFloat(this.PonudaDodatak.toString());
            this.PonudaDodatak = Globalize.format(tmp, "n2");

            tmp = parseFloat(this.Potraznja.toString());
            this.Potraznja = Globalize.format(tmp, "n2");

            tmp = parseFloat(this.PotraznjaDodatak.toString());
            this.PotraznjaDodatak = Globalize.format(tmp, "n2");

            tmp = parseFloat(this.Promet.toString());
            this.Promet = Globalize.format(tmp, "n2");

            tmp = parseFloat(this.PrometDodatak.toString());
            this.PrometDodatak = Globalize.format(tmp, "n2");
        });

        // functions
        self.addTrgovanjeStavka = function() {
            var stavkaExist = false;
            $(self.trgovanjeStavkaCollection()).each(function () {
                if (this.TrgovanjeVrstaId === self.selectedTrgovanjeVrsta().TrgovanjeVrstaId &&
                 this.ValutaId === self.selectedValuta().ValutaId) {
                    stavkaExist = true;
                }
            });

            if (stavkaExist) {
                alert("Trgovanje '" + self.selectedTrgovanjeVrsta().Name + "' za valutu '" + self.selectedValuta().Name + "' je ranije uneseno.");
            }
            else {
                var trgovanjeStavka = TrgovanjeStavka({
                    TrgovanjeVrstaId: self.selectedTrgovanjeVrsta().TrgovanjeVrstaId,
                    ValutaId: self.selectedValuta().ValutaId,
                    Ponuda: 0,
                    PonudaDodatak: 0,
                    Potraznja: 0,
                    PotraznjaDodatak: 0,
                    Promet: 0,
                    PrometDodatak: 0
                });

                trgovanjeStavka.TrgovanjeVrsta = { "Name": self.selectedTrgovanjeVrsta().Name };
                trgovanjeStavka.Valuta = { "Name": self.selectedValuta().Name };

                self.trgovanjeStavkaCollection.push(trgovanjeStavka);    
            }
        }

        self.save = function() {
            self.trgovanjeGlava().Komentar = CKEDITOR.instances["TextAreaDnevniKomentar"].getData();

            $.ajax({
                type: "POST",
                url: "@Url.Action("TrgovanjeSave")",
                data: {
                    trgovanjeGlavaId: @Model.TrgovanjeGlava.TrgovanjeGlavaId,
                    trgovanjeGlavaJson: ko.toJSON(self.trgovanjeGlava),
                    trgovanjeStavkaCollectionJson: ko.toJSON(self.trgovanjeStavkaCollection)
                },
                success: function (result) {
                    if (result.Error) {
                        alert(result.Error);
                    }
                    else if (result.Url) {
                        window.location.href = result.Url;
                    }
                    else {
                        alert("Greška kod odgovora servisa za pohranu podataka.");
                    }
                },
                error: function () {
                    alert("Desila se greška prilikom pohranjivanja podataka.");
                },
                async: false,
                cache: false
            });
        };

        self.deleteTrgovanjeStavka = function (trgovanjeStavka) {
            self.trgovanjeStavkaCollection.remove(trgovanjeStavka);
        }

        return self;
    };

    var viewModel = trgovanjeViewModel();
    ko.applyBindings(viewModel);
    $("#FormTrgovanje").validate({ submitHandler: viewModel.save });
</script>