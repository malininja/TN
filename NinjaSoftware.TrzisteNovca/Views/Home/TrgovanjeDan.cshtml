@model NinjaSoftware.TrzisteNovca.Models.Home.TrgovanjeDanViewModel
@using NinjaSoftware.TrzisteNovca.Models
@using NinjaSoftware.TrzisteNovca.CoolJ.EntityClasses
@using NinjaSoftware.TrzisteNovca.CoolJ.DatabaseGeneric.BusinessLogic

@{
    decimal? ponudaPromjena = Model.TrgovanjeGlava.PonudaPromjenaPosto(ValutaEnum.Kn);
    string ponudaPromjenaPosto = ponudaPromjena.HasValue ? ponudaPromjena.Value.ToString("N2") : "-";

    decimal? potraznjaPromjena = Model.TrgovanjeGlava.PotraznjaPromjenaPosto(ValutaEnum.Kn);
    string potraznjaPromjenaPosto = potraznjaPromjena.HasValue ? potraznjaPromjena.Value.ToString("N2") : "-";

    string danTrgovanja = string.Format("{0}, {1}", Model.TrgovanjeGlava.Datum.ToString("dd.MM.yyyy."), Model.TrgovanjeGlava.Datum.ToString("dddd"));
    string currentYear = DateTime.Now.Year.ToString();

    string title = danTrgovanja;
    ViewBag.Title = "Tržište novca Zagreb - Trgovanje na dan: " + title;

    int? ieVersion = Helper.GetIeVersion(Request);
}

@*@Html.Partial("_KonferencijaBanner")
<br />
<br />*@

<h1 class="no-space">
    Dnevni pokazatelji</h1>
<h2>@title</h2>

<div class="tn-datepicker">
    <table>
        <tr>
            <td width="40px"></td>
            <td>
            @if (ieVersion.HasValue && ieVersion.Value < 7)
            { 
                <img src="@Url.Content("~/Content/layout/ie6/kalendar.jpg")" />          
            }
            else
            {
                <img src="@Url.Content("~/Content/layout/kalendar.png")" />              
            }
            </td>
            <td>@Html.TextBox("inputDatum", Model.TrgovanjeGlava.Datum.ToString("dd.MM.yyyy"), new { id = "inputDatum" })
            </td>
            <td>
            @if (ieVersion.HasValue && ieVersion.Value < 7)
            { 
                <img class="print-1" src="@Url.Content("~/Content/layout/ie6/print.jpg")" />            
            }
            else
            {
                <img class="print-1" src="@Url.Content("~/Content/layout/print.png")" />                
            }
            </td>
        </tr>
    </table>
</div>
<div class="clearfix">
</div>
<h3>
    Trgovanje kunama</h3>
<div class="table-fixed-m">
    <table class="default">
        <thead>
            <tr>
                <th>
                    ponuda u mil. kn
                </th>
                <th>
                    promjena u %
                </th>
                <th>
                    potražnja u mil. kn
                </th>
                <th @Helper.GetTableSeparator()>
                    promjena u %
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Model.TrgovanjeGlava.Ponuda(ValutaEnum.Kn).ToStringInMilions()
                </td>
                <td>@ponudaPromjenaPosto @Helper.GetArrowClass(ponudaPromjenaPosto)
                </td>
                <td>@Model.TrgovanjeGlava.Potraznja(ValutaEnum.Kn).ToStringInMilions()
                </td>
                <td @Helper.GetTableSeparator()>@potraznjaPromjenaPosto @Helper.GetArrowClass(potraznjaPromjenaPosto)
                </td>
            </tr>
        </tbody>
    </table>
    <table class="default">
        <thead>
            <tr>
                <th>
                    promet
                </th>
                <th>
                    u mil. kn
                </th>
                <th>
                    promjena u %
                </th>
                <th>
                    kamatna stopa u %
                </th>
                <th @Helper.GetTableSeparator()>
                    promjena u %
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (TrgovanjeStavkaEntity trgovanjeStavka in Model.TrgovanjeGlava.TrgovanjeStavkaCollection.Where(ts => ts.ValutaId == (long)ValutaEnum.Kn))
            {
                string prometPromjenaPosto = trgovanjeStavka.PrometPromjenaPosto.HasValue ? trgovanjeStavka.PrometPromjenaPosto.Value.ToString("N2") : "-";
                string prometDodatakPromjenaPosto =
                    trgovanjeStavka.PrometDodatakPromjenaPosto.HasValue ? trgovanjeStavka.PrometDodatakPromjenaPosto.Value.ToString("N2") : "-";
                <tr>
                    <td>@trgovanjeStavka.TrgovanjeVrsta.Name
                    </td>
                    <td>@trgovanjeStavka.Promet.ToStringInMilions()
                    </td>
                    <td>@prometPromjenaPosto @Helper.GetArrowClass(prometPromjenaPosto)
                    </td>
                    <td>@trgovanjeStavka.PrometDodatak.ToString("N2")
                    </td>
                    <td @Helper.GetTableSeparator()>@prometDodatakPromjenaPosto @Helper.GetArrowClass(prometDodatakPromjenaPosto)
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                @{
                    decimal? promjenaPosto = Model.TrgovanjeGlava.PrometPromjenaPosto(ValutaEnum.Kn);
                    string ukupnoPrometPromjenaPosto = promjenaPosto.HasValue ? promjenaPosto.Value.ToString("N2") : "-";

                    decimal? kamatnaStopa = Model.TrgovanjeGlava.PrometKamatnaStopaPosto(ValutaEnum.Kn);
                    string ukupnoPrometKamatnaStopaPosto = kamatnaStopa.HasValue ? kamatnaStopa.Value.ToString("N2") : "-";

                    decimal? kamatnaStopaPromjena = Model.TrgovanjeGlava.PrometKamatnaStopaPromjenaPosto(ValutaEnum.Kn);
                    string ukupnoPrometKamatnaStopaPromjenaPosto = kamatnaStopaPromjena.HasValue ? kamatnaStopaPromjena.Value.ToString("N2") : "-";
                }
                <td>
                    ukupno:
                </td>
                <td>@Model.TrgovanjeGlava.Promet(ValutaEnum.Kn).ToStringInMilions()
                </td>
                <td>@ukupnoPrometPromjenaPosto @Helper.GetArrowClass(ukupnoPrometPromjenaPosto)
                </td>
                <td>@ukupnoPrometKamatnaStopaPosto
                </td>
                <td @Helper.GetTableSeparator()>@ukupnoPrometKamatnaStopaPromjenaPosto @Helper.GetArrowClass(ukupnoPrometKamatnaStopaPromjenaPosto)
                </td>
            </tr>
        </tfoot>
    </table>
</div>
@{
    IEnumerable<TrgovanjeStavkaEntity> devizeTrgovanjeStavkaCollection = Model.TrgovanjeGlava.TrgovanjeStavkaCollection.Where(ts =>
        ts.ValutaId != (long)ValutaEnum.Kn &&
        ts.Promet != 0);
}
@if (devizeTrgovanjeStavkaCollection.Count() > 0)
{
    <h3>
        Trgovanje devizama</h3>
    <div class="table-fixed-m">
        <table class="default">
            <thead>
                <tr>
                    <th>
                        valuta
                    </th>
                    <th>
                        promet u mil.
                    </th>
                    <th @Helper.GetTableSeparator()>
                        kamatna stopa u %
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (TrgovanjeStavkaEntity trgovanjeStavka in devizeTrgovanjeStavkaCollection)
                { 
                    <tr>
                        <td>@string.Format("{0} - {1}", trgovanjeStavka.Valuta.Code.ToUpperInvariant(), trgovanjeStavka.TrgovanjeVrsta.Name)
                        </td>
                        <td>@trgovanjeStavka.Promet.ToStringInMilions()
                        </td>
                        <td @Helper.GetTableSeparator()>@trgovanjeStavka.PrometDodatak.ToString("N2") 
                            @Helper.GetArrowClass(trgovanjeStavka.PrometDodatak)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<div class="table-fixed-m">
     <div class="raw">
        @Html.Raw(Model.TrgovanjeGlava.Komentar)
    </div>
</div>


@{
    HtmlString chartBoxStyle = new HtmlString(string.Empty);
    
    if (6 == ieVersion)
    {
        chartBoxStyle = new HtmlString("style='padding: 20px 20px 60px 20px;'");
    }    
}

<div class="container_12">
    <div class="grid_6 alpha chartArea">
    <h4>TRGOVANJE KUNAMA (u mil. kn)</h4>
    <div class="chart-box" @chartBoxStyle>
        <div id="chart">
        </div>
    </div>
    </div>
    <div class="grid_6 omega chartArea">
    <h4>PROSJEČNA KAMATNA STOPA (%)</h4>
    <div class="chart-box" @chartBoxStyle>
        <div id="chartKamatnaStopa">
        </div>
    </div>
    </div>
</div>
<div class="clearfix"></div>

<script type="text/javascript">
    $(document).ready(function () {

        Globalize.culture("hr");

        $("#inputDatum").datepicker({
            yearRange: "2000:@currentYear",
            changeMonth: true,
            changeYear: true,
            onSelect: function (dateText) {
                var datum = Globalize.parseDate(this.value);
                var linkParameter = datum.getFullYear() + "-" + (datum.getMonth() + 1) + "-" + datum.getDate();

                window.location.href = '@Url.Action("TrgovanjeDan")' + "?date=" + linkParameter;
            }
        });

        $("#divCalendar").click(function () {
            $("#inputDatum").datepicker("show");
        });

        var linePonuda = @Model.ChartLinePonudaDataSource;
        var linePotraznja = @Model.ChartLinePotraznjaDataSource;
        var linePromet = @Model.ChartLinePrometDataSource;
        var lineKamatnaStopa = @Model.ChartLineKamatnaStopaDataSource;

        var plot1 = $.jqplot('chart', [linePonuda, linePotraznja, linePromet], {
            axesDefaults: {
                tickRenderer: $.jqplot.CanvasAxisTickRenderer
            },
            axes: {
                xaxis: {
                    ticks: @Model.ChartTicks,
                   tickOptions: {
                        angle: -45
                    }
                },
                yaxis: {
                    min: 0
                }
            },
            legend: { 
                renderer: $.jqplot.EnhancedLegendRenderer,
                show: true,
                location: "s",
                placement: "outside",
                labels: ["Ponuda", "Potražnja", "Promet"],
                marginTop: "50px",
                rendererOptions: {
                    numberRows: 1
                }
            },
            seriesColors: [ "#006e5d", "#bec531", "#8b0043"]
        });

        var plotKs = $.jqplot('chartKamatnaStopa', [lineKamatnaStopa], {
            axesDefaults: {
                tickRenderer: $.jqplot.CanvasAxisTickRenderer
            },
            axes: {
                xaxis: {
                    ticks: @Model.ChartTicks,
                   tickOptions: {
                        angle: -45
                    }
                },
                yaxis: {
                    min: 0
                }
            },
            seriesColors: [ "#006e5d", "#bec531", "#8b0043"]
        });
    });
</script>