@model NinjaSoftware.TrzisteNovca.CoolJ.EntityClasses.TrgovanjeGlavaEntity
@using NinjaSoftware.TrzisteNovca.Models
@using NinjaSoftware.TrzisteNovca.CoolJ.EntityClasses
@using NinjaSoftware.TrzisteNovca.CoolJ.DatabaseGeneric.BusinessLogic

<script type="text/javascript" src="../../Scripts/jqplot/jquery.jqplot.min.js"></script>
<script type="text/javascript" src="../../Scripts/jqplot/plugins/jqplot.dateAxisRenderer.min.js"></script>

@{
    ViewBag.Title = "Index";

    decimal? ponudaPromjena = Model.PonudaPromjenaPosto(ValutaEnum.Kn);
    string ponudaPromjenaPosto = ponudaPromjena.HasValue ? ponudaPromjena.Value.ToString("N2") : "-";

    decimal? potraznjaPromjena = Model.PotraznjaPromjenaPosto(ValutaEnum.Kn);
    string potraznjaPromjenaPosto = potraznjaPromjena.HasValue ? potraznjaPromjena.Value.ToString("N2") : "-";

    string danTrgovanja = string.Format("{0} ({1})", Model.Datum.ToShortDateString(), Model.Datum.ToString("dddd"));
    string currentYear = DateTime.Now.Year.ToString();
}

<script type="text/javascript">
    $(document).ready(function () {
        Globalize.culture("hr");

        $("#inputDatum").datepicker({
            yearRange: "2000:@currentYear",
            changeMonth: true,
            changeYear: true,
            onSelect: function (dateText) {
                var datum = Globalize.parseDate(this.value);
                var linkParameter = datum.getFullYear() + "-" + (datum.getMonth() + 1) + "-" + datum.getDate();

                window.location.href = '@Url.Action("TrgovanjeDan")' + "?date=" + linkParameter;
            }
        });

        var line1 = [['2008-09-30 4:00PM', 4], ['2008-10-30 4:00PM', 6.5], ['2008-11-30 4:00PM', 5.7], ['2008-12-30 4:00PM', 9], ['2009-01-30 4:00PM', 8.2]];
        var plot1 = $.jqplot('chart', [line1], {
            title: 'Trgovanje kunama',
            axes: {
                xaxis: {
                    renderer: $.jqplot.DateAxisRenderer,
                    tickOptions: { formatString: "%d. %m." }
                } 
            },
            series: [{ lineWidth: 4, markerOptions: { style: 'square'}}]
        });
    });
</script>

<h2>Trgovanje na dan @danTrgovanja</h2>

Promjena datuma:
@Html.TextBox("inputDatum", Model.Datum.ToShortDateString(), new { id = "inputDatum"})

<h3>Trgovanje u kunama</h3>

<table>
    <tr>
        <th>Ponuda u mil. kn</th>
        <th>Promjena u %</th>
        <th>Potražnja u mil. kn</th>
        <th>Promjena u %</th>
    </tr>
    <tr>
        <td>@Model.Ponuda(ValutaEnum.Kn).ToStringInMilions()</td>        
        <td>@ponudaPromjenaPosto</td>
        <td>@Model.Potraznja(ValutaEnum.Kn).ToStringInMilions()</td>
        <td>@potraznjaPromjenaPosto</td>
    </tr>
</table>

<table>
    <tr>
        <th>Promet</th>
        <th>u mil. kn</th>
        <th>promjena u %</th>
        <th>kamatna stopa u %</th>
        <th>promjena u %</th>
    </tr>
    @foreach (TrgovanjeStavkaEntity trgovanjeStavka in Model.TrgovanjeStavkaCollection.Where(ts => ts.ValutaId == (long)ValutaEnum.Kn))
    {
        string prometPromjenaPosto = trgovanjeStavka.PrometPromjenaPosto.HasValue ? trgovanjeStavka.PrometPromjenaPosto.Value.ToString("N2") : "-";
        string prometDodatakPromjenaPosto =
            trgovanjeStavka.PrometDodatakPromjenaPosto.HasValue ? trgovanjeStavka.PrometDodatakPromjenaPosto.Value.ToString("N2") : "-";
    <tr>
        <td>@trgovanjeStavka.TrgovanjeVrsta.Name</td>
        <td>@trgovanjeStavka.Promet.ToStringInMilions()</td>
        <td>@prometPromjenaPosto</td>
        <td>@trgovanjeStavka.PrometDodatak.ToString("N2")</td>
        <td>@prometDodatakPromjenaPosto</td>
    </tr>
    }
    <tr>
        @{
            decimal? promjenaPosto = Model.PrometPromjenaPosto(ValutaEnum.Kn);
            string ukupnoPrometPromjenaPosto = promjenaPosto.HasValue ? promjenaPosto.Value.ToString("N2") : "-";

            decimal? kamatnaStopa = Model.PrometKamatnaStopaPosto(ValutaEnum.Kn);
            string ukupnoPrometKamatnaStopaPosto = kamatnaStopa.HasValue ? kamatnaStopa.Value.ToString("N2") : "-";

            decimal? kamatnaStopaPromjena = Model.PrometKamatnaStopaPromjenaPosto(ValutaEnum.Kn);
            string ukupnoPrometKamatnaStopaPromjenaPosto = kamatnaStopaPromjena.HasValue ? kamatnaStopaPromjena.Value.ToString("N2") : "-";
        }
        <td>Ukupno:</td>
        <td>@Model.Promet(ValutaEnum.Kn).ToStringInMilions()</td>
        <td>@ukupnoPrometPromjenaPosto</td>
        <td>@ukupnoPrometKamatnaStopaPosto</td>
        <td>@ukupnoPrometKamatnaStopaPromjenaPosto</td>
    </tr>
</table>

@{
    IEnumerable<TrgovanjeStavkaEntity> devizeTrgovanjeStavkaCollection = Model.TrgovanjeStavkaCollection.Where(ts => ts.ValutaId != (long)ValutaEnum.Kn);
    }

@if (devizeTrgovanjeStavkaCollection.Count() > 0)
{
    <h3>Pozajmice deviza</h3>
    <table>
        <tr>
            <th>Valuta</th>
            <th>Promet u mil.</th>
            <th>Kamatna stopa u %</th>
        </tr>
        @foreach (TrgovanjeStavkaEntity trgovanjeStavka in devizeTrgovanjeStavkaCollection)
        { 
        <tr>
            <td>@string.Format("{0} - {1}", trgovanjeStavka.Valuta.Name, trgovanjeStavka.TrgovanjeVrsta.Name)</td>
            <td>@trgovanjeStavka.Promet.ToStringInMilions()</td>
            <td>@trgovanjeStavka.PrometDodatak.ToString("N2")</td>
        </tr>
        }
    </table>
}

<br />
<br />

<div>
    @Html.Raw(Model.Komentar)
</div>

<div id="chart">

</div>